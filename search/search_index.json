{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to RouteML","text":"<p>TBD!</p>"},{"location":"utils/","title":"Documentation for <code>routeml.utils</code>","text":"<p>handler: python options: show_root_heading: true show_source: true</p>"},{"location":"utils/#routeml.utils.routes_to_solution","title":"<code>routes_to_solution(routes)</code>","text":"<p>Converts a list of routes into a solution (list of routes).</p> <p>Parameters:</p> Name Type Description Default <code>routes</code> <code>list</code> <p>List of routes, where each route is a list of nodes.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>Solution (list of routes).</p> Source code in <code>routeml/utils.py</code> <pre><code>def routes_to_solution(routes):\n\"\"\"\n    Converts a list of routes into a solution (list of routes).\n\n    Args:\n        routes (list): List of routes, where each route is a list of nodes.\n\n    Returns:\n        list: Solution (list of routes).\n    \"\"\"\n    solution = []\n    for i, route in enumerate(routes):\n        assert route[0] == 0\n        assert route[-1] == 0\n        # Skip depot node for all routes except the first one\n        if i &gt; 0:\n            route = route[1:]\n        solution += route\n    return solution\n</code></pre>"},{"location":"utils/#routeml.utils.solution_to_routes","title":"<code>solution_to_routes(solution)</code>","text":"<p>Converts a solution (list of nodes) into a list of routes.</p> <p>Parameters:</p> Name Type Description Default <code>solution</code> <code>list</code> <p>Solution (list of nodes).</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>List of routes, where each route is a list of nodes.</p> Source code in <code>routeml/utils.py</code> <pre><code>def solution_to_routes(solution):\n\"\"\"\n    Converts a solution (list of nodes) into a list of routes.\n\n    Args:\n        solution (list): Solution (list of nodes).\n\n    Returns:\n        list: List of routes, where each route is a list of nodes.\n    \"\"\"\n    routes = []\n    route = []\n    for node in solution:\n        if node == 0 and route:\n            route.append(0)\n            routes.append(route)\n            route = []\n        route.append(node)\n    return routes\n</code></pre>"}]}